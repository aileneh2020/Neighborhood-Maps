{"version":3,"sources":["components/DisplayList.js","components/DisplayMap.js","App.js","serviceWorker.js","index.js"],"names":["DisplayList","state","query","activeListItem","updateQuery","_this","setState","filterLocations","props","restaurants","document","getElementById","style","visibility","allList","length","filter","loc","name","toLowerCase","includes","filterFunc","listItemClicked","rest","index","thisItem","filteredList","getItemClicked","_this2","this","filteredRestaurants","selection","react_default","a","createElement","id","className","aria-label","onClick","toggleSidebar","role","type","placeholder","value","onChange","event","target","map","key","e","street","city","zip","url","href","rel","Component","fsClientID","fsClientSecret","fsVersion","DisplayMap","showInfoWindow","allMarkers","activeMarker","currMarker","mapLoaded","loadMarkers","markers","restaurant","marker","google","maps","Marker","position","lat","lng","animation","Animation","null","addListener","onMarkerClick","push","getVenueData","mprops","fsData","response","venues","item","resetItemClicked","baseUrl","concat","headers","Headers","request","Request","method","fetch","then","json","result","currRestaurant","Object","objectSpread","fs","detailUrl","image","photos","catch","error","alert","setAnimation","BOUNCE","setTimeout","onClose","onMapClick","filteredMarkers","forEach","setVisible","itemProp","itemClicked","keys","mClicked","find","center","dist","initialCenter","zoom","onReady","visible","alt","src","items","prefix","suffix","GoogleApiWrapper","apiKey","App","restaurantList","sidebarOpen","width","updateFilteredList","components_DisplayList","components_DisplayMap","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","gm_authFailure","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3caf0301.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass DisplayList extends Component {\r\n\tstate = {\r\n\t\tquery: '',\r\n\t\tactiveListItem: {}\r\n\t}\r\n\r\n\tupdateQuery = (query) => {\r\n\t\tthis.setState({ query: query },\r\n\t\t\tthis.filterLocations(this.props.restaurants, query)\r\n\t\t);\r\n\r\n\t\t// Clear restaurant details in Sidebar if user is typing\r\n\t\tdocument.getElementById('infoDisplay').style.visibility = 'hidden';\r\n\t}\r\n\r\n\tfilterLocations = (allList, query) => {\r\n\t\t// If user enters query then search for matches\r\n\t\tif (query.length > 0) {\r\n\t\t\tlet filter = allList.filter(loc =>\r\n\t\t\t\tloc.name.toLowerCase().includes(query.toLowerCase())\r\n\t\t\t);\r\n\t\t\tthis.props.filterFunc(filter);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// If no query then filteredList contains all restaurants\r\n\t\t\tthis.props.filterFunc(this.props.restaurants);\r\n\t\t}\r\n\t}\r\n\r\n\tlistItemClicked = (rest, index) => {\r\n\t\tlet thisItem = this.props.filteredList[index];\r\n\r\n\t\tthis.setState({ activeListItem: thisItem });\r\n\t\tthis.props.getItemClicked(thisItem);\r\n\r\n\t\t// Show details of selected restaurant in Sidebar\r\n\t\tdocument.getElementById('infoDisplay').style.visibility = 'visible';\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet filteredRestaurants = this.props.filteredList;\r\n\t\tlet selection = this.state.activeListItem;\r\n\r\n\t\treturn(\r\n\t\t\t<div id='sidebar'>\r\n\t\t\t\t<button className='closeMenuBtn' aria-label='close menu'  onClick={this.props.toggleSidebar}>X</button>\r\n\t\t\t\t<div id='search'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tid='search-box'\r\n\t\t\t\t\t\trole='searchbox'\r\n\t\t\t\t\t\taria-label='search filter'\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Filter restaurants by name'\r\n\t\t\t\t\t\tvalue={this.state.query}\r\n\t\t\t\t\t\tonChange={(event) => this.updateQuery(event.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{filteredRestaurants.length ?\r\n\t\t\t\t\t\tfilteredRestaurants.map((rest, index) =>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName='listItem'\r\n\t\t\t\t\t\t\t\taria-label={'listing for ' + rest.name}\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\tonClick={e => this.listItemClicked(rest, index)}\r\n\t\t\t\t\t\t\t>{rest.name}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t) : 'No Results Found'\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id='infoDisplay'>\r\n\t\t\t\t\t<h2>RESTAURANT DETAILS</h2>\r\n\t\t\t\t\t<h3>{selection.name}</h3>\r\n\t\t\t\t\t<h3>{selection.street}</h3>\r\n\t\t\t\t\t<h3>{selection.city + ', ' + selection.state + ', ' + selection.zip}</h3>\r\n\t\t\t\t\t{selection.url ?\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\taria-label='restaurant website'\r\n\t\t\t\t\t\t\thref={selection.url}\r\n\t\t\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\t\t\trel='noopener noreferrer'>\r\n\t\t\t\t\t\t\t{selection.url}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t: ''\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DisplayList\r\n","import React, { Component } from 'react';\r\nimport { Map, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\r\nimport '../App.css';\r\n\r\nconst mapKey='AIzaSyBuL7mjc3O3hhrdTWuHRwdKv6k11bUbisk';\r\nconst fsClientID='0KIQPKH3YXQ0JVIUFLOKB315XNQ2VNE31YRMWYIRFT42S3CV';\r\nconst fsClientSecret='OYN5K2A3JMLM3FHP2OVB3CVK4CLP5FJDPXJNSRPHFJVWDRGV';\r\nconst fsVersion='20181108';\r\n\r\nclass DisplayMap extends Component {\r\n\tstate = {\r\n\t\tmap: null,\r\n\t\tshowInfoWindow: false,\r\n\t\tallMarkers: [],\r\n\t\tactiveMarker: {},\r\n\t\tcurrMarker: {}\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tlet filteredMarkers = [];\r\n\r\n\t\t// Get a list of all markers that match the current filtered list\r\n\t\tthis.state.allMarkers.forEach(marker => {\r\n\t\t\tthis.props.filteredList.forEach(filter => {\r\n\t\t\t\tif (filter.name === marker.name) {\r\n\t\t\t\t\tfilteredMarkers.push(marker);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// Display markers on map based on the current filtered list\r\n\t\tthis.state.allMarkers.forEach(marker => {\r\n\t\t\tmarker.setVisible(false);\r\n\t\t});\r\n\t\tfilteredMarkers.forEach(marker => {\r\n\t\t\tmarker.setVisible(true);\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentWillReceiveProps() {\r\n\t\t// Check to see if a list item is clicked and activate its marker\r\n\t\tlet itemProp = this.props.itemClicked;\r\n\r\n\t\tif (Object.keys(itemProp).length === 0) return;\r\n\t\tif (Object.keys(itemProp).length > 0) {\r\n\t\t\tlet mClicked = this.state.allMarkers.find(marker =>\r\n\t\t\t\tmarker.name === itemProp.name\r\n\t\t\t);\r\n\t\t\tthis.onMarkerClick(itemProp, mClicked);\r\n\t\t}\r\n\t}\r\n\r\n\tmapLoaded = (props, map) => {\r\n\t\tthis.setState({ map });\r\n\t\tthis.loadMarkers(props);\r\n\t}\r\n\r\n\t// Create and load all markers to the map\r\n\tloadMarkers = (props) => {\r\n\t\tif (!this.props.restaurants.length) return;\r\n\r\n\t\tlet markers = [];\r\n\r\n\t\t// For every restaurant, create a corresponding marker\r\n\t\tthis.props.restaurants.map((restaurant, index) => {\r\n\t\t\tlet marker = new this.props.google.maps.Marker({\r\n\t\t\t\tmap: this.state.map,\r\n\t\t\t\tname: restaurant.name,\r\n\t\t\t\turl: restaurant.url,\r\n\t\t\t\tposition: {lat: restaurant.position.lat, lng: restaurant.position.lng},\r\n\t\t\t\tkey: restaurant.index,\r\n\t\t\t\tanimation: this.props.google.maps.Animation.null\r\n\t\t\t});\r\n\t\t\tmarker.addListener('click', () => {\r\n\t\t\t\tthis.onMarkerClick(restaurant, marker)\r\n\t\t\t});\r\n\t\t\tmarkers.push(marker);\r\n\t\t})\r\n\r\n\t\t// Save all created markers as an array in state\r\n\t\tthis.setState({ allMarkers: markers })\r\n\t}\r\n\r\n\tgetVenueData = (mprops, fsData) => {\r\n\t\t// Compare FourSquare data for matching restaurant name\r\n\t\t// Accept names that are longer or shorter versions of same restaurant\r\n\t\treturn fsData.response.venues.filter(item =>\r\n\t\t\titem.name.includes(mprops.name) || mprops.name.includes(item.name)\r\n\t\t);\r\n\t}\r\n\r\n\tonMarkerClick = (mprops, marker) => {\r\n\t\tthis.props.resetItemClicked();\r\n\r\n\t\t// Set up fetch URL\r\n\t\tlet baseUrl = `https://api.foursquare.com/v2/venues/search?client_id=${fsClientID}&client_secret=${fsClientSecret}&v=${fsVersion}&ll=${mprops.position.lat},${mprops.position.lng}&llAcc=50`;\r\n\t\tlet headers = new Headers();\r\n\t\tlet request = new Request(baseUrl, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders\r\n\t\t});\r\n\t\tlet currMarker;\r\n\r\n\t\t// Request data from FourSquare for current marker\r\n\t\tfetch(request)\r\n\t\t.then(response => response.json())\r\n\t\t.then(result => {\r\n\t\t\tlet currRestaurant = this.getVenueData(mprops, result)\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrMarker: {\r\n\t\t\t\t\t...mprops,\r\n\t\t\t\t\tfs: currRestaurant[0]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\t// If FourSquare data found, search for venue's photo\r\n\t\t\tif (this.state.currMarker.fs) {\r\n\t\t\t\tlet detailUrl = `https://api.foursquare.com/v2/venues/${currRestaurant[0].id}/photos?client_id=${fsClientID}&client_secret=${fsClientSecret}&v=${fsVersion}&limit=1`;\r\n\r\n\t\t\t\tfetch(detailUrl)\r\n\t\t\t\t.then(response => response.json())\r\n\t\t\t\t.then(result => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tcurrMarker: {\r\n\t\t\t\t\t\t\t...currMarker,\r\n\t\t\t\t\t\t\timage: result.response.photos\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => alert('Unable to retrieve data. ' + error));\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => alert('Unable to retrieve data. ' + error));\r\n\r\n\t\t// Stop animation on any previous active marker\r\n\t\tif (this.state.showInfoWindow) {\r\n\t\t\tthis.state.activeMarker.setAnimation(this.props.google.maps.Animation.null);\r\n\t\t}\r\n\r\n\t\t// Set activeMarker state and display InfoWindow\r\n\t\tthis.setState({\r\n\t\t\tactiveMarker: marker,\r\n\t\t\tshowInfoWindow: true,\r\n\t\t});\r\n\r\n\t\t// Make marker bounce briefly\r\n\t\tmarker.setAnimation(this.props.google.maps.Animation.BOUNCE);\r\n\t\tsetTimeout(() => marker.setAnimation(this.props.google.maps.Animation.null), 1000);\r\n\t}\r\n\r\n\t// Reset activeMarker state and close InfoWindow when \"X\" is clicked\r\n\tonClose = () => {\r\n\t\tif (this.state.showInfoWindow) {\r\n\t\t\tthis.state.activeMarker.setAnimation(this.props.google.maps.Animation.null);\r\n\t\t\tthis.setState({\r\n\t\t\t\tshowInfoWindow: false,\r\n\t\t\t\tactiveMarker: null\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Reset activeMarker state and close InfoWindow when map is clicked\r\n\tonMapClick = (props) => {\r\n\t\tif (this.state.showInfoWindow) {\r\n\t\t\tthis.state.activeMarker.setAnimation(this.props.google.maps.Animation.null);\r\n\t\t\tthis.setState({\r\n\t\t\t\tshowInfoWindow: false,\r\n\t\t\t\tactiveMarker: null\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst center = {\r\n\t\t\tlat: this.props.lat,\r\n\t\t\tlng: this.props.lng\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div id='map-container' role='application' aria-label='Google Maps'>\r\n\t\t\t\t<Map\r\n\t\t\t\t\tinitialCenter={center}\r\n\t\t\t\t\tzoom={this.props.zoom}\r\n\t\t\t\t\tgoogle={this.props.google}\r\n\t\t\t\t\tonReady={this.mapLoaded}\r\n\t\t\t\t\tonClick={this.onMapClick}\r\n\t\t\t\t>\r\n\t\t\t\t\t<InfoWindow\r\n\t\t\t\t\t\tmarker={this.state.activeMarker}\r\n\t\t\t\t\t\tvisible={this.state.showInfoWindow}\r\n\t\t\t\t\t\tonClose={this.onClose}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h4 className='infoText'>\r\n\t\t\t\t\t\t\t\t{this.state.activeMarker && this.state.activeMarker.name}\r\n\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t{this.state.activeMarker && this.state.activeMarker.url ?\r\n\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\taria-label='restaurant website'\r\n\t\t\t\t\t\t\t\t\thref={this.state.activeMarker.url}\r\n\t\t\t\t\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\t\t\t\t\trel='noopener noreferrer'>\r\n\t\t\t\t\t\t\t\t\t{this.state.activeMarker.url}\r\n\t\t\t\t\t\t\t\t</a> : ''\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<div className='infoImage'>\r\n\t\t\t\t\t\t\t\t{this.state.activeMarker && this.state.currMarker && this.state.currMarker.image ?\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\talt={'Photo of ' + this.state.activeMarker.name}\r\n\t\t\t\t\t\t\t\t\t\tsrc={this.state.currMarker.image.items[0].prefix + 'cap100' + this.state.currMarker.image.items[0].suffix}/>\r\n\t\t\t\t\t\t\t\t\t\t<p>Photo by FourSquare</p>\r\n\t\t\t\t\t\t\t\t\t</div> : 'Image Not Available'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</InfoWindow>\r\n\t\t\t\t</Map>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default GoogleApiWrapper({ apiKey: mapKey })(DisplayMap);\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport DisplayList from './components/DisplayList';\r\nimport DisplayMap from './components/DisplayMap';\r\nimport restaurants from './data/RestaurantList';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    lat: 33.7592028,\r\n    lng: -117.9897071,\r\n    zoom: 13,\r\n    restaurantList: restaurants.restaurants,\r\n    filteredList: restaurants.restaurants,\r\n    itemClicked: {},\r\n    sidebarOpen: false\r\n  }\r\n\r\n  toggleSidebar = () => {\r\n    if (this.state.sidebarOpen === true) {\r\n      return (\r\n        (document.getElementById(\"sidebar\").style.width = 0),\r\n        this.setState({ sidebarOpen: false })\r\n      );\r\n    }\r\n    else if (this.state.sidebarOpen === false) {\r\n      return (\r\n        (document.getElementById(\"sidebar\").style.width = \"320px\"),\r\n        this.setState({ sidebarOpen: true })\r\n      );\r\n    }\r\n  }\r\n\r\n  updateFilteredList = (filter) => {\r\n    this.setState({ filteredList: filter })\r\n  }\r\n\r\n  getItemClicked = (item) => {\r\n    this.setState({itemClicked: item}, () => this.toggleSidebar());\r\n  }\r\n\r\n  resetItemClicked = () => {\r\n    this.setState({ itemClicked: {} })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <div>\r\n            <button className='menuBtn' aria-label='show menu' onClick={this.toggleSidebar}>\r\n              <i className=\"fas fa-bars\"></i>\r\n            </button>\r\n          </div>\r\n          <div id='page-title'>\r\n            <h1>Restaurants near Westminster, CA</h1>\r\n          </div>\r\n        </header>\r\n        <DisplayList\r\n          restaurants={this.state.restaurantList}\r\n          filteredList={this.state.filteredList}\r\n          filterFunc={this.updateFilteredList}\r\n          sidebarOpen={this.state.sidebarOpen}\r\n          toggleSidebar={this.toggleSidebar}\r\n          getItemClicked={this.getItemClicked}\r\n        />\r\n        <DisplayMap\r\n          lat={this.state.lat}\r\n          lng={this.state.lng}\r\n          zoom={this.state.zoom}\r\n          restaurants={this.state.restaurantList}\r\n          filteredList={this.state.filteredList}\r\n          itemClicked={this.state.itemClicked}\r\n          resetItemClicked={this.resetItemClicked}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Check for Google authentication errors\r\nwindow.gm_authFailure = () => {\r\n\tReactDOM.render(\r\n\t\t<h2>Network Error: Unable to load Google Map. Try again later.</h2>,\r\n\t\twindow.document.getElementById('root')\r\n\t)\r\n}\r\n\r\nReactDOM.render(\r\n\t<App />, document.getElementById('root')\r\n)\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}